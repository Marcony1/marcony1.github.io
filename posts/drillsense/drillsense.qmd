---
title: "Project Drillsense"
author: ["Marco Bravo", "Aishwarya Nadimpally", "Anu Banga", "Weiran Zhao"]
date: "2024-06-26"
categories: [code, analysis, dashboard, visualization, mining, geojson, prediction, Machine Learning, Time Series, Dash]
image: "drillsense.gif"
resources: [drillsense.gif, contributions.png]
---

Rio Tinto Exploration is tasked with identifying and prioritizing mineral exploration projects globally. Mineral exploration discoveries primarily occur through drilling. 


<div style="text-align: justify;">
In Project DrillSense we deliver a dynamic and predictive solution that enables Rio Tinto to monitor and analyze drilling trends more effectively. Our data product is designed to answer three critical questions: it identifies current global trends in drilling, allows for the assessment of diverse trends across different metals, and offers predictions for upcoming drilling sites. This balanced approach ensures Rio Tinto can make well-informed decisions based on the insights available.
</div>


### Dashboard Overview
![](drillsense.gif)

*Disclaimer: This project belongs to RioTinto and everything contained in the project repository must remain private. Only a general overview of the project will be given.*

### Data product
The Data Product consists of:

1. Dashboard

2. Final report
The final report provides a comprehensive analysis and summary of the project findings. 

3. Notebooks
Notebooks used for data cleaning, analysis, visualization and models. These notebooks provide detailed insights and the code used for the project.
Feasibility tests and analyses are also available in the archived notebooks in the repository.

4. Miro board

5. Technical document


### Project Organization
├── LICENSE
├── Makefile           <- Makefile with commands like `make data` or `make train`
├── README.md          <- The top-level README for developers using this project.
├── CODE_OF_CONDUCT.md <- The Code of Conduct guidelines for developers using this project.
├── CONTRIBUTING.md    <- The Contributing guidelines for developers using this project.
├── automation
│   ├── aws            <- Automation/IaaS scripts for AWS (Cloudformation).
│   └── local          <- Automation/Docker scripts for local testing.
│
├── data
│   ├── processed      <- The final, canonical data sets for modeling.
│   └── raw            <- The original, immutable data dump.
│
├── EDA                <- Scripts to create exploratory and results oriented visualizations
│
├── img                <- Image Folder
│
├── docs               <- A default Sphinx project; see sphinx-doc.org for details
│
├── models             <- Trained and serialized models, model predictions, or model summaries
│
├── notebooks          <- Jupyter notebooks. Naming convention is a number (for ordering),
│                         the creator's initials, and a short `-` delimited description, e.g.
│                         `1.0-jqp-initial-data-exploration`.
│
├── proposal           <- Proposal report, presentation and Final presentation
│
│
├── references         <- Data dictionaries, manuals, and all other explanatory materials.
│
├── reports            <- Generated analysis as HTML, PDF, LaTeX, etc.
│   └── figures        <- Generated graphics and figures to be used in reporting
│
├── requirements.txt   <- The requirements file for reproducing the analysis environment, e.g.
│                         generated with `pip freeze > requirements.txt`
│
├── environment.yaml   <- makes project pip installable (pip install -e .) so src can be imported
├── src                <- Source code for use in this project.
│   ├── __init__.py    <- Makes src a Python module
│   │
│   ├── data           <- Scripts to download or generate data
│   │   └── make_dataset.py
│   │
│   ├── assets           <- Folder to keep images and docs
│   │   └── img
│   │
│   ├── features       <- Scripts/containers to process raw data into features for modeling
│   │   └── build_features.py
│   │
│   ├── descriptive       <- Scripts/containers to process raw data to visualize historical trends on dashboard
│   │   ├── __init__.py
│   │   ├── callbacks.py
│   │   └── components.py
│   │
│   ├── models         <- Scripts/containers to train models and then use trained models to make
│   │   │                 predictions
|   |   ├── __init__.py
|   |   ├── finalized_model.pkl
│   │   ├── predict_model.py
│   │   └── train_model.py
│   │
│   ├── predictive     <- Scripts/containers to process raw data to visualize predictions on dashboard
│   │   ├── __init__.py
│   │   ├── callbacks.py
│   │   └── components.py
│   │
│   ├── tests          <- Scripts for unit test cases
|   |
│   ├── visualization  <- Scripts to create exploratory and results oriented visualizations
│   |   └── visualize.py
|   └── User Guide    <- User Guide for Dashboard usage
│
└── tox.ini            <- tox file with settings for running tox; see tox.readthedocs.io

### Contributions
![](contributions.png)
